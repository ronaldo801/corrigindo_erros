criar repositorio
organizar
remover e modificar
e os comandos basicos


git log
Mostra o histórico de commits do repositório, incluindo autor, data e mensagem de cada commit.
Ex: git log

git status
Exibe o estado atual dos arquivos: modificados, prontos para commit e não monitorados.
Ex: git status

git diff
Mostra as diferenças entre arquivos modificados e o último commit, útil para revisar alterações.
Ex: git diff

git restore
Descarta mudanças em arquivos que ainda não foram commitadas.
Ex: git restore arquivo.txt

git checkout
Muda de branch ou restaura versões antigas de arquivos.
Ex: git checkout nome-da-branch

git reset
Desfaz commits ou remove arquivos da área de staging.
Ex: git reset --soft HEAD~1

git revert
Cria um novo commit que desfaz as alterações de um commit anterior, sem alterar o histórico.
Ex: git revert <id-do-commit>

<<<<<<< HEAD
testea
=======
teste
>>>>>>> 0bf636d65f44ed15a87fa52f5471182da8348532

git reset:
Usado para "voltar atrás" em commits localmente. Ele pode modificar o histórico do seu repositório local, apagando commits ou movendo o ponteiro do HEAD para um commit anterior.

Exemplo: Você cometeu algo errado e ainda não enviou (push) para o repositório remoto. Pode usar git reset para apagar ou modificar esses commits localmente.

Atenção: Se você já enviou os commits para o remoto e outras pessoas podem ter baixado, usar reset e reescrever o histórico pode causar confusão.

git revert:
Cria um novo commit que desfaz as alterações de um commit anterior sem apagar o histórico.

Exemplo: Se você já enviou (push) um commit com um erro e precisa desfazê-lo de forma segura, use git revert. Assim, o histórico fica intacto, e a reversão é clara para todos.

Ideal para corrigir erros em commits já compartilhados.